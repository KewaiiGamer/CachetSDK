{
  "name": "Cachetsdk",
  "tagline": "A PHP SDK for Cachet, providing a full functionality access.",
  "body": "#CachetSDK\r\nA PHP SDK for [Cachet](https://cachethq.io/), providing a full functionality access.\r\n\r\n\r\n[![Code Climate](https://codeclimate.com/github/damianopetrungaro/CachetSDK/badges/gpa.svg)](https://codeclimate.com/github/damianopetrungaro/CachetSDK) [![Build Status](https://travis-ci.org/damianopetrungaro/CachetSDK.svg?branch=master)](https://travis-ci.org/damianopetrungaro/CachetSDK)\r\n\r\n\r\n#### Click [here for the API Documentation of SDK](http://cachetsdk.damianopetrungaro.com/)\r\n\r\n#### Available Elements and method\r\n\r\n* [General](#general)\r\n    * [ping](#general-ping)\r\n    * [version](#general-version)\r\n* [Components](#components)\r\n    * [cacheComponents](#components-cache)\r\n    * [deleteComponent](#components-delete)\r\n    * [getComponent](#components-get)\r\n    * [indexComponents](#components-index)\r\n    * [searchComponent](#components-search)\r\n    * [storeComponent](#components-store)\r\n    * [updateComponent](#components-update)\r\n* [Groups](#groups)\r\n    * [cacheGroups](#groups-cache)\r\n    * [deleteGroup](#groups-delete)\r\n    * [getGroup](#groups-get)\r\n    * [indexGroups](#groups-index)\r\n    * [searchGroup](#groups-search)\r\n    * [storeGroup](#groups-store)\r\n    * [updateGroup](#groups-update)\r\n* [Incidents](#incidents)\r\n    * [cacheIncidents](#incidents-cache)\r\n    * [deleteIncident](#incidents-delete)\r\n    * [getIncident](#incidents-get)\r\n    * [indexIncidents](#incidents-index)\r\n    * [searchIncident](#incidents-search)\r\n    * [storeIncident](#incidents-store)\r\n    * [updateIncident](#incidents-update)\r\n* [Metrics](#metrics)\r\n    * [cacheMetrics](#metrics-cache)\r\n    * [deleteMetric](#metrics-delete)\r\n    * [getMetric](#metrics-get)\r\n    * [indexMetrics](#metrics-index)\r\n    * [searchMetric](#metrics-search)\r\n    * [storeMetric](#metrics-store)\r\n* [Points](#points)\r\n    * [cachePoints](#points-cache)\r\n    * [deletePoint](#points-delete)\r\n    * [indexPoints](#points-index)\r\n    * [searchPoint](#points-search)\r\n    * [storePoint](#points-store)\r\n* [Subscribers](#subscribers)\r\n    * [cacheSubscribers](#subscribers-cache)\r\n    * [deleteSubscriber](#subscribers-delete)\r\n    * [indexSubscribers](#subscribers-index)\r\n    * [searchSubscriber](#subscribers-search)\r\n    * [storeSubscriber](#subscribers-store)\r\n* [Exceptions](#exceptions)\r\n\r\n\r\n## Installation\r\n\r\nAdd `damianopetrungaro/cachet-sdk` to `composer.json`.\r\n\r\n```json\r\n   \"damianopetrungaro/cachet-sdk\": \"^0.8.0\"\r\n```\r\n    \r\nRun `composer update` to pull down the latest version of CachetSDK.\r\n\r\nOr install it directly from the command line using\r\n\r\n```shell\r\ncomposer require \"damianopetrungaro/cachet-sdk\"\r\n```\r\n\r\n## Cachet Client\r\nFor create a cachet client you need an endpoint and a token, those data are available on your Cachet site.\r\n\r\n    $cachetClient = new CachetClient('endPointGoesHere/api/v1', 'tokenGoesHere');\r\n\r\nA client MUST be injected to a ElementFactory. This allow you to use multiple sites of cachet in one shot!\r\n\r\nAll the factories are documented in the first part of each element.\r\n\r\n\r\n## General\r\n\r\n### Init a general element\r\nFor use one or more action for the General element, you must init an instance of GeneralActions.\r\n\r\n```php\r\n    $generalManager = GeneralFactory::build($cachetClient);\r\n```\r\n\r\n\r\n----------\r\n\r\n\r\n### General Ping\r\nThis method ping your cachet site.\r\n\r\n```php\r\n    $generalManager = GeneralFactory::build($cachetClient);\r\n    $pong = $generalManager->ping();\r\n```\r\n\r\n----------\r\n\r\n\r\n### General Version\r\n\r\nThis method get your cachet site version.\r\n\r\n```php\r\n    $generalManager = GeneralFactory::build($cachetClient);\r\n    $version = $generalManager->version();\r\n```\r\n\r\n----------\r\n----------\r\n----------\r\n\r\n## Components\r\n\r\n### Init a component element\r\nFor use one or more action for the Component element, you must init an instance of ComponentsActions.\r\n\r\n```php\r\n    $componentManager = ComponentFactory::build($cachetClient);\r\n```\r\n\r\n----------\r\n\r\n\r\n### Components Cache\r\nThe cache method allows you to call multiple time the API without kill the performance.\r\nThis method is used in [indexComponents](#components-index) and [searchComponent](#components-search), and use the cachet pagination.\r\n\r\nAnyway you can instance it manually, but for use it in [indexComponents](#components-index) and [searchComponent](#components-search) you must set the cache to true.\r\n\r\n```php\r\n    $componentManager->setCache(true); // If you want to use cache\r\n```\r\n\r\n```php\r\n    $componentManager = ComponentFactory::build($cachetClient);\r\n    $cachedComponents = $componentManager->cacheComponents($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of component to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Components Delete\r\n\r\nThe delete method allows you to delete a specific component from cachet.\r\n\r\n```php\r\n    $componentManager = ComponentFactory::build($cachetClient);\r\n    $deleteComponent = $componentManager->deleteComponent($id);\r\n```\r\n\r\n###### $id (int) = Component ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Components Get\r\n\r\nThe get method allows you to get a specific component from cachet.\r\n\r\n```php\r\n    $componentManager = ComponentFactory::build($cachetClient);\r\n    $getComponent = $componentManager->getComponent($id);\r\n```\r\n\r\n###### $id (int) = Component ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Components Index\r\n\r\nThe index method allows you to get a list of component from cachet.\r\n\r\n```php\r\n    $componentManager = ComponentFactory::build($cachetClient);\r\n    // $componentManager->setCache(true); // If you want to use cache\r\n    $indexComponents = $componentManager->indexComponents($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of component to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n\r\n----------\r\n\r\n\r\n### Components Search\r\n\r\nThe search method allows you to get one or more component from cachet searching by key's value.\r\n\r\n!!! THIS METHOD DON'T RETURN A STANDARD CACHET RESPONSE !!!\r\n!!! RETURN A SIMPLE ARRAY WITH ALL THE FOUND COMPONENTS !!!\r\n\r\n```php\r\n    $componentManager = ComponentFactory::build($cachetClient);\r\n    // $componentManager->setCache(true); // If you want to use cache\r\n    $components = $componentManager->searchComponents($search, $by, $limit, $num, $page)\r\n```\r\n\r\n###### $search (mixed) = Value to find.\r\n\r\n###### $by (string) = Column where search the value.\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n###### $limit (int - default = 1) = Number of components to return.\r\n\r\n###### $num (int - default = 1000) = Number of component to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Components Store\r\n\r\nThe store method allows you to add a component.\r\n\r\n```php\r\n    $componentManager = ComponentFactory::build($cachetClient);\r\n    $component = $componentManager->storeComponent($component)\r\n```\r\n\r\n###### $component (array) = For required params read the [Cachet Doc](https://docs.cachethq.io/docs).\r\n\r\n    $sampleArray = [\r\n        'name' => 'component name',\r\n        'description' => 'component description',\r\n        'link' => 'component link',\r\n        'status' => 1,\r\n        'order' => 1,\r\n        'group_id' => 0,\r\n        'enabled' => 1,\r\n    ];\r\n\r\n\r\n----------\r\n\r\n\r\n### Components Update\r\n\r\n\r\nThe update method allows you to update a specific component.\r\n\r\n```php\r\n    $componentManager = ComponentFactory::build($cachetClient);\r\n    $component = $componentManager->updateComponent($id, $component)\r\n```\r\n\r\n###### $id (int) = Component ID.\r\n###### $component (array) = For required params read the [Cachet Doc](https://docs.cachethq.io/docs).\r\n\r\n    $sampleArray = [\r\n        'name' => 'component name',\r\n        'description' => 'component description',\r\n        'link' => 'component link',\r\n        'status' => 1,\r\n        'order' => 1,\r\n        'group_id' => 0,\r\n        'enabled' => 1,\r\n    ];\r\n\r\n----------\r\n----------\r\n----------\r\n\r\n## Groups\r\n\r\n### Init a group element\r\nFor use one or more action for the Group element, you must init an instance of GroupsActions.\r\n\r\n```php\r\n    $groupManager = GroupFactory::build($cachetClient);\r\n```\r\n\r\n----------\r\n\r\n\r\n### Groups Cache\r\nThe cache method allows you to call multiple time the API without kill the performance.\r\nThis method is used in [indexGroups](#groups-index) and [searchGroup](#groups-search), and use the cachet pagination.\r\n\r\nAnyway you can instance it manually, but for use it in [indexCaches](#caches-index) and [searchCache](#caches-search) you must set the cache to true.\r\n\r\n```php\r\n    $cacheManager->setCache(true); // If you want to use cache\r\n```\r\n\r\n```php\r\n    $groupManager = GroupFactory::build($cachetClient);\r\n    $cachedGroups = $groupManager->cacheGroups($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of group to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Groups Delete\r\n\r\nThe delete method allows you to delete a specific group from cachet.\r\n\r\n```php\r\n    $groupManager = GroupFactory::build($cachetClient);\r\n    $deleteGroup = $groupManager->deleteGroup($id);\r\n```\r\n\r\n###### $id (int) = Group ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Groups Get\r\n\r\nThe get method allows you to get a specific group from cachet.\r\n\r\n```php\r\n    $groupManager = GroupFactory::build($cachetClient);\r\n    $getGroup = $groupManager->getGroup($id);\r\n```\r\n\r\n###### $id (int) = Group ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Groups Index\r\n\r\nThe index method allows you to get a list of group from cachet.\r\n\r\n```php\r\n    $groupManager = GroupFactory::build($cachetClient);\r\n    // $groupManager->setCache(true); // If you want to use cache\r\n    $indexGroups = $groupManager->indexGroups($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of group to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n\r\n----------\r\n\r\n\r\n### Groups Search\r\n\r\nThe search method allows you to get one or more group from cachet searching by key's value.\r\n\r\n!!! THIS METHOD DON'T RETURN A STANDARD CACHET RESPONSE !!!\r\n!!! RETURN A SIMPLE ARRAY WITH ALL THE FOUND COMPONENTS !!!\r\n\r\n```php\r\n    $groupManager = GroupFactory::build($cachetClient);\r\n    // $groupManager->setCache(true); // If you want to use cache\r\n    $groups = $groupManager->searchGroups($search, $by, $limit, $num, $page)\r\n```\r\n\r\n###### $search (mixed) = Value to find.\r\n\r\n###### $by (string) = Column where search the value.\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n###### $limit (int - default = 1) = Number of groups to return.\r\n\r\n###### $num (int - default = 1000) = Number of group to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Groups Store\r\n\r\nThe store method allows you to add a group.\r\n\r\n```php\r\n    $groupManager = GroupFactory::build($cachetClient);\r\n    $group = $groupManager->storeGroup($group)\r\n```\r\n\r\n###### $group (array) = For required params read the [Cachet Doc](https://docs.cachethq.io/docs).\r\n\r\n    $sampleArray = [\r\n      'name' => 'new group name',\r\n      'order' => 1,\r\n      'collapsed' => 0,\r\n    ];\r\n\r\n\r\n----------\r\n\r\n\r\n### Groups Update\r\n\r\n\r\nThe update method allows you to update a specific group.\r\n\r\n```php\r\n    $groupManager = GroupFactory::build($cachetClient);\r\n    $group = $groupManager->updateGroup($id, $group)\r\n```\r\n\r\n###### $id (int) = Group ID.\r\n###### $group (array) = For required params read the [Cachet Doc](https://docs.cachethq.io/docs).\r\n\r\n    $sampleArray = [\r\n      'name' => 'new group name',\r\n      'order' => 1,\r\n      'collapsed' => 0,\r\n    ];\r\n\r\n----------\r\n----------\r\n----------\r\n\r\n\r\n## Incidents\r\n\r\n### Init a incident element\r\nFor use one or more action for the Incident element, you must init an instance of IncidentsActions.\r\n\r\n```php\r\n    $incidentManager = IncidentFactory::build($cachetClient);\r\n```\r\n\r\n----------\r\n\r\n\r\n### Incidents Cache\r\nThe cache method allows you to call multiple time the API without kill the performance.\r\nThis method is used in [indexIncidents](#incidents-index) and [searchIncident](#incidents-search), and use the cachet pagination.\r\n\r\nAnyway you can instance it manually, but for use it in [indexIncidents](#incidents-index) and [searchIncident](#incidents-search) you must set the cache to true.\r\n\r\n```php\r\n    $incidentManager->setCache(true); // If you want to use cache\r\n```\r\n\r\n```php\r\n    $incidentManager = IncidentFactory::build($cachetClient);\r\n    $cachedIncidents = $incidentManager->cacheIncidents($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of incident to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Incidents Delete\r\n\r\nThe delete method allows you to delete a specific incident from cachet.\r\n\r\n```php\r\n    $incidentManager = IncidentFactory::build($cachetClient);\r\n    $deleteIncident = $incidentManager->deleteIncident($id);\r\n```\r\n\r\n###### $id (int) = Incident ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Incidents Get\r\n\r\nThe get method allows you to get a specific incident from cachet.\r\n\r\n```php\r\n    $incidentManager = IncidentFactory::build($cachetClient);\r\n    $getIncident = $incidentManager->getIncident($id);\r\n```\r\n\r\n###### $id (int) = Incident ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Incidents Index\r\n\r\nThe index method allows you to get a list of incident from cachet.\r\n\r\n```php\r\n    $incidentManager = IncidentFactory::build($cachetClient);\r\n    // $incidentManager->setCache(true); // If you want to use cache\r\n    $indexIncidents = $incidentManager->indexIncidents($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of incident to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n\r\n----------\r\n\r\n\r\n### Incidents Search\r\n\r\nThe search method allows you to get one or more incident from cachet searching by key's value.\r\n\r\n!!! THIS METHOD DON'T RETURN A STANDARD CACHET RESPONSE !!!\r\n!!! RETURN A SIMPLE ARRAY WITH ALL THE FOUND COMPONENTS !!!\r\n\r\n```php\r\n    $incidentManager = IncidentFactory::build($cachetClient);\r\n    // $incidentManager->setCache(true); // If you want to use cache\r\n    $incidents = $incidentManager->searchIncidents($search, $by, $limit, $num, $page)\r\n```\r\n\r\n###### $search (mixed) = Value to find.\r\n\r\n###### $by (string) = Column where search the value.\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n###### $limit (int - default = 1) = Number of incidents to return.\r\n\r\n###### $num (int - default = 1000) = Number of incident to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Incidents Store\r\n\r\nThe store method allows you to add a incident.\r\n\r\n```php\r\n    $incidentManager = IncidentFactory::build($cachetClient);\r\n    $incident = $incidentManager->storeIncident($incident)\r\n```\r\n\r\n###### $incident (array) = For required params read the [Cachet Doc](https://docs.cachethq.io/docs).\r\n\r\n    $sampleArray = [\r\n      'name' => 'incident name',\r\n      'message' => 'incident message',\r\n      'status' => 1,\r\n      'visible' => 1,\r\n      'component_id' => 1,\r\n      'component_status' => 1,\r\n      'notify' => 1\r\n    ];\r\n\r\n\r\n----------\r\n\r\n\r\n### Incidents Update\r\n\r\n\r\nThe update method allows you to update a specific incident.\r\n\r\n```php\r\n    $incidentManager = IncidentFactory::build($cachetClient);\r\n    $incident = $incidentManager->updateIncident($id, $incident)\r\n```\r\n\r\n###### $id (int) = Incident ID.\r\n###### $incident (array) = For required params read the [Cachet Doc](https://docs.cachethq.io/docs).\r\n\r\n    $sampleArray = [\r\n      'name' => 'incident name',\r\n      'message' => 'incident message',\r\n      'status' => 1,\r\n      'visible' => 1,\r\n      'component_id' => 1,\r\n      'component_status' => 1,\r\n      'notify' => 1\r\n    ];\r\n\r\n----------\r\n----------\r\n----------\r\n\r\n## Metrics\r\n\r\n### Init a metric element\r\nFor use one or more action for the Metric element, you must init an instance of MetricsActions.\r\n\r\n```php\r\n    $metricManager = MetricFactory::build($cachetClient);\r\n```\r\n\r\n----------\r\n\r\n\r\n### Metrics Cache\r\nThe cache method allows you to call multiple time the API without kill the performance.\r\nThis method is used in [indexMetrics](#metrics-index) and [searchMetric](#metrics-search), and use the cachet pagination.\r\n\r\nAnyway you can instance it manually, but for use it in [indexMetrics](#metrics-index) and [searchMetric](#metrics-search) you must set the cache to true.\r\n\r\n```php\r\n    $metricManager->setCache(true); // If you want to use cache\r\n```\r\n\r\n```php\r\n    $metricManager = MetricFactory::build($cachetClient);\r\n    $cachedMetrics = $metricManager->cacheMetrics($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of metric to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Metrics Delete\r\n\r\nThe delete method allows you to delete a specific metric from cachet.\r\n\r\n```php\r\n    $metricManager = MetricFactory::build($cachetClient);\r\n    $deleteMetric = $metricManager->deleteMetric($id);\r\n```\r\n\r\n###### $id (int) = Metric ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Metrics Get\r\n\r\nThe get method allows you to get a specific metric from cachet.\r\n\r\n```php\r\n    $metricManager = MetricFactory::build($cachetClient);\r\n    $getMetric = $metricManager->getMetric($id);\r\n```\r\n\r\n###### $id (int) = Metric ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Metrics Index\r\n\r\nThe index method allows you to get a list of metric from cachet.\r\n\r\n```php\r\n    $metricManager = MetricFactory::build($cachetClient);\r\n    // $metricManager->setCache(true); // If you want to use cache\r\n    $indexMetrics = $metricManager->indexMetrics($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of metric to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n\r\n----------\r\n\r\n\r\n### Metrics Search\r\n\r\nThe search method allows you to get one or more metric from cachet searching by key's value.\r\n\r\n!!! THIS METHOD DON'T RETURN A STANDARD CACHET RESPONSE !!!\r\n!!! RETURN A SIMPLE ARRAY WITH ALL THE FOUND COMPONENTS !!!\r\n\r\n```php\r\n    $metricManager = MetricFactory::build($cachetClient);\r\n    // $metricManager->setCache(true); // If you want to use cache\r\n    $metrics = $metricManager->searchMetrics($search, $by, $limit, $num, $page)\r\n```\r\n\r\n###### $search (mixed) = Value to find.\r\n\r\n###### $by (string) = Column where search the value.\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n###### $limit (int - default = 1) = Number of metrics to return.\r\n\r\n###### $num (int - default = 1000) = Number of metric to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Metrics Store\r\n\r\nThe store method allows you to add a metric.\r\n\r\n```php\r\n    $metricManager = MetricFactory::build($cachetClient);\r\n    $metric = $metricManager->storeMetric($metric)\r\n```\r\n\r\n###### $metric (array) = For required params read the [Cachet Doc](https://docs.cachethq.io/docs).\r\n\r\n    $sampleArray = [\r\n      'name' => 'metric name',\r\n      'suffix' => 'metric suffix',\r\n      'description' => 'metric description',\r\n      'default_value' => 100,\r\n      'display_chart' => 1,\r\n      'calc_type' => 1,\r\n      'default_view' => 1,\r\n      'threshold' => 1,\r\n    ];\r\n\r\n\r\n----------\r\n----------\r\n----------\r\n\r\n\r\n## Subscribers\r\n\r\n### Init a subscriber element\r\nFor use one or more action for the Subscriber element, you must init an instance of SubscribersActions.\r\n\r\n```php\r\n    $subscriberManager = SubscriberFactory::build($cachetClient);\r\n```\r\n\r\n----------\r\n\r\n\r\n### Subscribers Cache\r\nThe cache method allows you to call multiple time the API without kill the performance.\r\nThis method is used in [indexSubscribers](#subscribers-index) and [searchSubscriber](#subscribers-search), and use the cachet pagination.\r\n\r\nAnyway you can instance it manually, but for use it in [indexSubscribers](#subscribers-index) and [searchSubscriber](#subscribers-search) you must set the cache to true.\r\n\r\n```php\r\n    $subscriberManager->setCache(true); // If you want to use cache\r\n```\r\n\r\n```php\r\n    $subscriberManager = SubscriberFactory::build($cachetClient);\r\n    $cachedSubscribers = $subscriberManager->cacheSubscribers($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of subscriber to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Subscribers Delete\r\n\r\nThe delete method allows you to delete a specific subscriber from cachet.\r\n\r\n```php\r\n    $subscriberManager = SubscriberFactory::build($cachetClient);\r\n    $deleteSubscriber = $subscriberManager->deleteSubscriber($id);\r\n```\r\n\r\n###### $id (int) = Subscriber ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Subscribers Index\r\n\r\nThe index method allows you to get a list of subscriber from cachet.\r\n\r\n```php\r\n    $subscriberManager = SubscriberFactory::build($cachetClient);\r\n    // $subscriberManager->setCache(true); // If you want to use cache\r\n    $indexSubscribers = $subscriberManager->indexSubscribers($num, $page)\r\n```\r\n\r\n###### $num (int - default = 1000) = Number of subscriber to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n\r\n----------\r\n\r\n\r\n### Subscribers Search\r\n\r\nThe search method allows you to get one or more subscriber from cachet searching by key's value.\r\n\r\n!!! THIS METHOD DON'T RETURN A STANDARD CACHET RESPONSE !!!\r\n!!! RETURN A SIMPLE ARRAY WITH ALL THE FOUND COMPONENTS !!!\r\n\r\n```php\r\n    $subscriberManager = SubscriberFactory::build($cachetClient);\r\n    // $subscriberManager->setCache(true); // If you want to use cache\r\n    $subscribers = $subscriberManager->searchSubscribers($search, $by, $limit, $num, $page)\r\n```\r\n\r\n###### $search (mixed) = Value to find.\r\n\r\n###### $by (string) = Column where search the value.\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n###### $limit (int - default = 1) = Number of subscribers to return.\r\n\r\n###### $num (int - default = 1000) = Number of subscriber to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Subscribers Store\r\n\r\nThe store method allows you to add a subscriber.\r\n\r\n```php\r\n    $subscriberManager = SubscriberFactory::build($cachetClient);\r\n    $subscriber = $subscriberManager->storeSubscriber($subscriber)\r\n```\r\n\r\n###### $subscriber (array) = For required params read the [Cachet Doc](https://docs.cachethq.io/docs).\r\n\r\n    $sampleArray = [\r\n      'name' => 'subscriber name',\r\n      'suffix' => 'subscriber suffix',\r\n      'description' => 'subscriber description',\r\n      'default_value' => 100,\r\n      'display_chart' => 1,\r\n      'calc_type' => 1,\r\n      'default_view' => 1,\r\n      'threshold' => 1,\r\n    ];\r\n\r\n----------\r\n----------\r\n----------\r\n\r\n## Points\r\n\r\n### Init a point element\r\nFor use one or more action for the Point element, you must init an instance of PointsActions.\r\n\r\n```php\r\n    $pointManager = PointFactory::build($cachetClient);\r\n```\r\n\r\n----------\r\n\r\n\r\n### Points Cache\r\nThe cache method allows you to call multiple time the API without kill the performance.\r\nThis method is used in [indexPoints](#points-index) and [searchPoint](#points-search), and use the cachet pagination.\r\n\r\nAnyway you can instance it manually, but for use it in [indexPoints](#points-index) and [searchPoint](#points-search) you must set the cache to true.\r\n\r\n```php\r\n    $pointManager->setCache(true); // If you want to use cache\r\n```\r\n\r\n```php\r\n    $pointManager = PointFactory::build($cachetClient);\r\n    $cachedPoints = $pointManager->cachePoints($metricId, $num, $page)\r\n```\r\n\r\n###### $metricId (int) = Metric ID.\r\n\r\n###### $num (int - default = 1000) = Number of point to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Points Delete\r\n\r\nThe delete method allows you to delete a specific point from cachet.\r\n\r\n```php\r\n    $pointManager = PointFactory::build($cachetClient);\r\n    $deletePoint = $pointManager->deletePoint($metricId, $id);\r\n```\r\n\r\n###### $metricId (int) = Metric ID.\r\n\r\n###### $id (int) = Point ID.\r\n\r\n\r\n----------\r\n\r\n\r\n### Points Index\r\n\r\nThe index method allows you to get a list of point from cachet.\r\n\r\n```php\r\n    $pointManager = PointFactory::build($cachetClient);\r\n    // $subscriberManager->setCache(true); // If you want to use cache\r\n    $indexPoints = $pointManager->indexPoints($metricId, $num, $page, $cache)\r\n```\r\n\r\n###### $metricId (int) = Metric ID.\r\n\r\n###### $num (int - default = 1000) = Number of point to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n\r\n----------\r\n\r\n\r\n### Points Search\r\n\r\nThe search method allows you to get one or more point from cachet searching by key's value.\r\n\r\n!!! THIS METHOD DON'T RETURN A STANDARD CACHET RESPONSE !!!\r\n!!! RETURN A SIMPLE ARRAY WITH ALL THE FOUND COMPONENTS !!!\r\n\r\n```php\r\n    $pointManager = PointFactory::build($cachetClient);\r\n    // $pointManager->setCache(true); // If you want to use cache\r\n    $points = $pointManager->searchPoints($metricId, $search, $by, $limit, $num, $page)\r\n```\r\n\r\n###### $metricId (int) = Metric ID.\r\n\r\n###### $search (mixed) = Value to find.\r\n\r\n###### $by (string) = Column where search the value.\r\n\r\n###### $cache (bool - default = true) = Use cache method.\r\n\r\n###### $limit (int - default = 1) = Number of points to return.\r\n\r\n###### $num (int - default = 1000) = Number of point to return from a single page (uses cachet pagination).\r\n\r\n###### $page (int - default = 1) = Page number (uses cachet pagination).\r\n\r\n\r\n----------\r\n\r\n\r\n### Points Store\r\n\r\nThe store method allows you to add a point.\r\n\r\n```php\r\n    $pointManager = PointFactory::build($cachetClient);\r\n    $point = $pointManager->storePoint($metricId, $point)\r\n```\r\n\r\n###### $metricId (int) = Metric ID.\r\n\r\n###### $point (array) = For required params read the [Cachet Doc](https://docs.cachethq.io/docs).\r\n\r\n    $sampleArray = [\r\n      'value' => 100\r\n    ];\r\n\r\n\r\n----------\r\n----------\r\n----------\r\n\r\n### Exceptions\r\n\r\nThe exceptions are all based on GuzzleHttp except one, that is used for InvalidResponse\r\n\r\n  * CachetSDKConnectException\r\n  * CachetSDKServerException\r\n  * CachetSDKClientException\r\n  * CachetSDKTooManyRedirectsException\r\n  * CachetSDKInvalidResponseException\r\n\r\nFor more information how to catch, [just see the call method in the CachetClient](http://cachetsdk.damianopetrungaro.com/source-class-Damianopetrungaro.CachetSDK.CachetClient.html#53-74)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}